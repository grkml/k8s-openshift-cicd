#!groovy

def GUID = "00e1"

podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // Set the tag for the development image: version + build number
      def devTag  = "${version}-${currentBuild.number}"
      // Set the tag for the production image: version
      def prodTag = "${version}"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        // Execute Maven Build
        sh "${mvnCmd} clean package -DskipTests=true"
      }

      // The next two stages should run in parallel
      stage("Run unit tests and code analysis in parallel") {
        parallel unitTests: {
          // Using Maven run the unit tests
          stage('Unit Tests') {
            echo "Running Unit Tests"

            // Execute Unit Tests
            sh "${mvnCmd} test"
          }
        }, codeAnalysis: {
          // Using Maven to call SonarQube for Code Analysis
          stage('Code Analysis') {
            echo "Running Code Analysis"

            // Execute Sonarqube Tests
            sh "${mvnCmd} sonar:sonar \
              -DskipTests=true \
              -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000/ \
              -Dsonar.projectName=${JOB_BASE_NAME} \
              -Dsonar.projectVersion=${devTag}"
          }
        },
        failFast: true
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // Publish to Nexus
        sh "${mvnCmd} deploy \
          -DskipTests=true \
          -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-dev") {
              // Build Image
              openshift.selector("bc", "tasks").startBuild(
                "--from-file=./target/openshift-tasks.war", 
                "--wait=true"
              )

              // Tag Image
              openshift.tag(
                "tasks:latest", 
                "tasks:${devTag}"
              )
            }
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // Deploy to development Project
        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-dev") {

              // Set Image
              openshift.set(
                "image", 
                "dc/tasks", 
                "tasks=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${devTag}"
              )

              // Set VERSION
              openshift.set(
                "env",
                "dc/tasks",
                "VERSION='${devTag} (tasks-dev)'"
              )

              // Replace Placeholders in configmap/tasks-config
              openshift.selector("configmap", "tasks-config").delete()
              openshift.create(
                "configmap",
                "tasks-config",
                "--from-file=./configuration/application-users.properties",
                "--from-file=./configuration/application-roles.properties"
              )

              // Make sure the application is running and ready before proceeding
              def devDc = openshift.selector("dc", "tasks")
              devDc.rollout().latest()
              devDc.rollout().status()
            }
          }
        }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry
        sh "skopeo copy \
          --src-tls-verify=false \
          --dest-tls-verify=false \
          --src-creds openshift:\$(oc whoami -t) \
          --dest-creds admin:redhat \
          docker://docker-registry.default.svc.cluster.local:5000/${GUID}-tasks-dev/tasks:${devTag} \
          docker://nexus3-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"

        // TBD: Tag the built image with the production tag.
        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-prod") {
              openshift.tag(
                "${GUID}-tasks-dev/tasks:${devTag}", 
                "${GUID}-tasks-dev/tasks:${prodTag}"
              )
            }
          }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = ""
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
        
        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-prod") {
              activeApp = openshift.selector("route", "tasks").object().spec.to.name
              if (activeApp == "tasks-green") {
                destApp = "tasks-blue"
              } else if (activeApp == "tasks-blue") {
                destApp = "tasks-green"
              }

              echo "The Active Application is ${activeApp}"
              echo "The Destination Application is ${destApp}"

              // def prodDc = openshift.selector("dc/${destApp}").object()

              // prodDc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${prodTag}"

              openshift.set(
                "image", 
                "dc/${destApp}", 
                "${destApp}=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${prodTag}"
              )

              openshift.set(
                "env",
                "dc/${destApp}",
                "VERSION='${prodTag} (${destApp})'"
              )

              // openshift.apply(dc)

              // Update Config Map in change config files changed in the source
              openshift.selector("configmap", "${destApp}-config").delete()
              def configmap = openshift.create(
                "configmap", 
                "${destApp}-config", 
                "--from-file=./configuration/application-users.properties", 
                "--from-file=./configuration/application-roles.properties" 
              )

              def prodDc = openshift.selector("dc", "${destApp}")
              prodDc.rollout().latest()
              prodDc.rollout().status()

            }
          }
        }
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch

        script {
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-prod") {
              openshift.set(
                "route-backends",
                "tasks",
                "${destApp}=100%",
                "${activeApp}=0%"
              )
            }
          }
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}